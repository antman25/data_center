node("DOCKER")
{
    def build_branch = params.getOrDefault("BUILD_BRANCH","main")
    def has_mods = false
    def var_filepath = env.getEnvironment().getOrDefault("var_filepath", "")
    def trigger_paths = nv.getEnvironment().getOrDefault("triggers", "")
    currentBuild.displayName = "Build ID: ${BUILD_NUMBER}"
    currentBuild.description = "Branch: ${build_branch}"

    ws("/mnt/scratch/appdata/jenkins-workspace")
    {
        stage("Git Checkout")
        {
            checkout([$class: 'GitSCM', branches: [[name: build_branch]], extensions: [], userRemoteConfigs: [[credentialsId: 'jenkins_ssh', url: 'http://gitlab.antlinux.local:30080/antman/data_center.git']]])
        }
        def current_git_commit = sh(returnStdout: true, script: "git rev-parse HEAD").trim()

        stage ("ENV dump")
        {
            sh('env | sort -n')
            //print(env.getEnvironment())
            print(params)
        }

        stage('Get Modified Files')
        {
            try
            {
                def prev_git_commit = readFile("${WORKSPACE}/PREV_GIT_COMMIT").trim()
                echo "Last Successful commit hash: ${prev_git_commit}"
                def modified_files = sh(returnStdout: true, script: "git diff --name-only ${prev_git_commit}").trim()
                echo "Modified Files:\n${modified_files}"

                def trigger_path_split = trigger_paths.split(";")
                trigger_path_split.each {
                    print("Trigger Path: ${it}")
                }
                def modified_files_lines = modified_files.split('\n')
                modified_files_lines.each {
                    print("Modified file: ${it}")
                }


                has_mods = true
            }
            catch (Exception ex)
            {
                echo "Exception getting last commit: ${ex}"
                has_mods = true
            }
        }
        stage("Build Pipeline")
        {
            lock ('VSPHERE-SERVER')
            {
                stage("Stage01 - ISO")
                {
                    //                        -var http_ip=${build_node_ip} \
                    withCredentials([string(credentialsId: 'vsphere-password', variable: 'VSPHERE_PASSWORD')]) {
                        withEnv(["BUILD_BRANCH=${build_branch}"])
                        {
                            sh "cd packer-library/centos/golden/scripts && ./build_stage01.sh ${var_filepath}"
                        }


                    }
                }

                stage("Stage02 - Base OS Config")
                {
                    //                        -var http_ip=${build_node_ip} \
                    withCredentials([string(credentialsId: 'vsphere-password', variable: 'VSPHERE_PASSWORD')]) {
                        withEnv(["BUILD_BRANCH=${build_branch}"])
                        {
                            sh "cd packer-library/centos/golden/scripts && ./build_stage02.sh ${var_filepath}"
                        }
                    }
                }
            }
        }

        stage ("Save Commit SHA")
        {
            sh("echo ${current_git_commit} > PREV_GIT_COMMIT")
        }
    }

    /*
    sh """docker run \
                                    --pull always \
                                    --network host \
                                    -e BUILD_BRANCH=${params.BUILD_BRANCH} \
                                    -e VSPHERE_PASSWORD=${vsphere_password} \
                                    -v ${WORKSPACE}/packer-library/centos:/packer \
                                    nexus.antlinux.local:8443/custom-base/hashicorp/packer:latest \
                                    build -color=false -timestamp-ui -on-error=cleanup -force \
                                    -var-file=vars/common_vm/default.json \
                                    -var-file=${var_filepath} \
                                    -only="stage01.vsphere-iso.centos_iso" /packer
                            """
    */
	

	/*properties([ 	disableConcurrentBuilds(),
			gitLabConnection(gitLabConnection: 'gitlab1', jobCredentialId: ''),
			parameters([string(defaultValue: 'main', name: 'BUILD_BRANCH')])
			])*/
}
